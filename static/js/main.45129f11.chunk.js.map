{"version":3,"sources":["components/travel-date-picker/TravelDatePicker.module.css","assets/personCircle.svg","assets/xCircle.svg","components/travel-date-picker/TravelDatePicker.js","containers/Main.js","store/MainReducer.js","components/top-navbar/TopNavbar.js","store/actionCreators.js","store/actions.js","App.js","serviceWorker.js","index.js","components/top-navbar/TopNavbar.module.css"],"names":["module","exports","getCalendarForMonth","month","year","monthStr","dateString","daysInMonth","moment","firstDayIndex","weekday","calendarIndex","Array","from","length","v","ix","reduce","acc","val","push","newArray","TravelDatePicker","props","startDate","onDateSelect","useState","getDate","selDay","setSelDay","getMonth","monthNumber","setMonthNumber","getFullYear","yearNumber","setYearNumber","calendar","useMemo","onSelectDate","useCallback","day","Date","onNextMonth","onPrevMonth","calendarTemplate","map","week","weekIx","className","key","dayIx","onClick","styles","dateCell","datePicker","type","Main","today","date","console","log","INITIAL_STATE","userName","TopNavbar","useSelector","store","unModel","setUNModel","dipatch","useDispatch","onSetUserName","event","preventDefault","target","value","setUserName","formClasses","hide","show","userDiv","src","xCircle","icon","alt","to","activeClassName","rightMenuItems","join","action","onSubmit","e","placeholder","onChange","personCircleIcon","createStore","state","App","component","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.45129f11.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"datePicker\":\"TravelDatePicker_datePicker__kaF3n\",\"dateCell\":\"TravelDatePicker_dateCell__1LKVm\"};","module.exports = __webpack_public_path__ + \"static/media/personCircle.987687b8.svg\";","module.exports = __webpack_public_path__ + \"static/media/xCircle.ba82ea60.svg\";","import React, { useMemo, useState, useCallback } from \"react\";\nimport moment from \"moment\";\nimport styles from \"./TravelDatePicker.module.css\";\n\nconst TravelDatePicker = (props) => {\n  const { startDate, onDateSelect } = props;\n  const [selDay, setSelDay] = useState(startDate.getDate());\n  const [monthNumber, setMonthNumber] = useState(startDate.getMonth() + 1);\n  const [yearNumber, setYearNumber] = useState(startDate.getFullYear());\n  const calendar = useMemo(() => getCalendarForMonth(monthNumber, yearNumber), [\n    monthNumber,\n    yearNumber,\n  ]);\n\n  const onSelectDate = useCallback(\n    (day) => {\n      if (day) {\n        setSelDay(day);\n        onDateSelect(new Date(yearNumber, monthNumber - 1, selDay));\n      }\n    },\n    [monthNumber, yearNumber, selDay, onDateSelect]\n  );\n\n  const onNextMonth = useCallback(() => {\n    if (monthNumber < 12) {\n      setMonthNumber(monthNumber + 1);\n    } else {\n      setMonthNumber(1);\n      setYearNumber(yearNumber + 1);\n    }\n  }, [yearNumber, monthNumber]);\n\n  const onPrevMonth = useCallback(() => {\n    if (monthNumber > 1) {\n      setMonthNumber(monthNumber - 1);\n    } else {\n      setMonthNumber(12);\n      setYearNumber(yearNumber - 1);\n    }\n  }, [yearNumber, monthNumber]);\n\n  // todo styling\n  const calendarTemplate = calendar.map((week, weekIx) => (\n    <div className={\"row\"} key={`week[${weekIx}]`}>\n      {week.map((day, dayIx) => (\n        <div\n          onClick={() => onSelectDate(day[0])}\n          className={`col-xs text-center ${styles.dateCell}`}\n          key={`day[${dayIx}]`}\n        >\n          {day[0] === 0 ? null : day[0]}\n        </div>\n      ))}\n    </div>\n  ));\n  return (\n    <div className={`${styles.datePicker}`}>\n      <div className=\"\">\n        <div className={\"btn-group\"}>\n          <button\n            type={\"button\"}\n            className={\"btn btn-secondary\"}\n            onClick={() => onPrevMonth()}\n          >\n            Prev\n          </button>\n          <button\n            type={\"button\"}\n            className={\"btn btn-secondary\"}\n            onClick={() => onNextMonth()}\n          >\n            Next\n          </button>\n        </div>\n        <div className=\"ml-3\">\n          {selDay} - {monthNumber} - {yearNumber}\n        </div>\n      </div>\n      <div className=\"container mt-2\">{calendarTemplate}</div>\n    </div>\n  );\n};\n/**\n *\n * @param {number} month\n * @param {number} year\n * @returns {[][][string, boolean]}\n */\nconst getCalendarForMonth = (month, year) => {\n  const monthStr = month < 10 ? `0${month}` : month;\n  const dateString = `${year}-${monthStr}`;\n  const date = moment(dateString, \"YYYY-MM\");\n  const daysInMonth = date.daysInMonth();\n  let firstDayIndex = moment(`${dateString}-01`, \"YYYY-MM-dd\").weekday();\n  firstDayIndex = firstDayIndex === 0 ? 7 : firstDayIndex;\n  let calendarIndex = 0;\n  return Array.from({ length: daysInMonth + firstDayIndex - 1 }, (v, ix) => {\n    // month start empty values\n    if (ix < firstDayIndex - 1 || ix > daysInMonth + firstDayIndex - 1) {\n      return 0;\n    } else {\n      return ++calendarIndex;\n    }\n  }).reduce(\n    (acc, val) => {\n      if (acc[acc.length - 1].length < 7) {\n        acc[acc.length - 1].push([val, false]);\n      } else {\n        const newArray = [];\n        newArray.push([val, false]);\n        acc.push(newArray);\n      }\n      return acc;\n    },\n    [[]]\n  );\n};\n\nexport default TravelDatePicker;\n","import React, { useMemo } from \"react\";\nimport TravelDatePicker from \"../components/travel-date-picker/TravelDatePicker\";\n\nconst Main = () => {\n  const today = useMemo(() => new Date(), []);\n  return (\n    <div className={\"container-fluid\"}>\n      <div className={\"row\"}>\n        <div className={\"col-md-6\"}>\n          <TravelDatePicker\n            startDate={today}\n            onDateSelect={(date) => console.log(date)}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default Main;\n","import * as actions from \"./actions\";\n\nconst INITIAL_STATE = {\n  userName: \"\",\n};\n\nexport default function mainReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case actions.SET_USER_NAME:\n      return {\n        ...state,\n        userName: action.userName,\n      };\n    default:\n      return state;\n  }\n}\n","import React, { useCallback, useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setUserName } from \"../../store/actionCreators\";\nimport styles from \"./TopNavbar.module.css\";\nimport personCircleIcon from \"../../assets/personCircle.svg\";\nimport xCircle from \"../../assets/xCircle.svg\";\n\nconst TopNavbar = () => {\n  const userName = useSelector((store) => store.userName);\n  const [unModel, setUNModel] = useState(userName);\n  const dipatch = useDispatch();\n  const onSetUserName = useCallback(\n    (userName, event) => {\n      if (event) {\n        event.preventDefault();\n        event.target.value = \"\";\n      }\n      dipatch(setUserName(userName));\n    },\n    [dipatch]\n  );\n  const formClasses = [];\n  if (userName) {\n    formClasses.push(styles.hide);\n  } else {\n    formClasses.push(styles.show);\n  }\n  const userDiv = userName ? (\n    <div className={\"d-flex justify-content-space\"}>\n      <span className={\"navbar-text text-center mr-2\"}>Witaj, {userName} </span>\n      <button type={\"button\"} className={\"btn btn-outline-default\"}>\n        <img\n          src={xCircle}\n          className={styles.icon}\n          alt={\"close\"}\n          onClick={() => onSetUserName(null)}\n        />\n      </button>\n    </div>\n  ) : null;\n  return (\n    <nav className={`navbar navbar-expand-sm navbar-light bg light`}>\n      <NavLink to={\"/\"} className={\"navbar-brand\"} activeClassName={\"active\"}>\n        WSB Airlines\n      </NavLink>\n      <div\n        className={`d-flex justify-content-end align-items-center w-100 ${styles.rightMenuItems}`}\n      >\n        <div className={formClasses.join(\" \")}>\n          <form\n            className={\"form-inline\"}\n            action={null}\n            onSubmit={(e) => onSetUserName(unModel, e)}\n          >\n            <input\n              value={unModel}\n              className={\"form-control mr-2\"}\n              placeholder={\"Wpisz identyfikator\"}\n              onChange={(event) => setUNModel(event.target.value)}\n            />\n            <button type={\"submit\"} className={\"btn btn-outline-default\"}>\n              <img\n                className={styles.icon}\n                src={personCircleIcon}\n                alt={\"Ustaw identyfikator\"}\n              />\n            </button>\n          </form>\n        </div>\n        {userDiv}\n      </div>\n    </nav>\n  );\n};\n\nexport default TopNavbar;\n","import * as actions from \"./actions\";\n\nexport function setUserName(userName) {\n  return {\n    type: actions.SET_USER_NAME,\n    userName,\n  };\n}\n","export const SET_USER_NAME = \"SET_USER_NAME\";\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Main from \"./containers/Main\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport MainReducer from \"./store/MainReducer\";\nimport TopNavbar from \"./components/top-navbar/TopNavbar\";\n\nconst store = createStore(MainReducer);\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <TopNavbar></TopNavbar>\n        <Switch>\n          <Route component={Main} path={\"/\"} />\n        </Switch>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hide\":\"TopNavbar_hide__1RKru\",\"show\":\"TopNavbar_show__vk9jI\",\"rightMenuItems\":\"TopNavbar_rightMenuItems__3_Orf\",\"icon\":\"TopNavbar_icon__2qiW-\"};"],"sourceRoot":""}
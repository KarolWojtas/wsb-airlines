{"version":3,"sources":["components/top-navbar/TopNavbar.module.css","containers/Main.js","store/MainReducer.js","components/top-navbar/TopNavbar.js","store/actionCreators.js","store/actions.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Main","className","INITIAL_STATE","userName","TopNavbar","useSelector","store","useState","unModel","setUNModel","dipatch","useDispatch","onSetUserName","useCallback","event","preventDefault","type","setUserName","formClasses","push","styles","hide","show","userDiv","onClick","to","activeClassName","join","action","onSubmit","e","value","placeholder","onChange","target","createStore","state","App","component","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGACAA,EAAOC,QAAU,CAAC,KAAO,wBAAwB,KAAO,0B,sLCIzCC,EAHF,WACX,OAAO,yBAAKC,UAAW,qB,uBCDnBC,EAAgB,CACpBC,SAAU,I,iCCwDGC,EArDG,WAChB,IAAMD,EAAWE,aAAY,SAACC,GAAD,OAAWA,EAAMH,YADxB,EAEQI,mBAASJ,GAFjB,mBAEfK,EAFe,KAENC,EAFM,KAGhBC,EAAUC,cACVC,EAAgBC,uBACpB,SAACV,EAAUW,GACLA,GACFA,EAAMC,iBAERL,ECbC,SAAqBP,GAC1B,MAAO,CACLa,KCJyB,gBDKzBb,YDUUc,CAAYd,MAEtB,CAACO,IAEGQ,EAAc,GAChBf,EACFe,EAAYC,KAAKC,IAAOC,MAExBH,EAAYC,KAAKC,IAAOE,MAE1B,IAAMC,EAAUpB,EACd,0BAAMF,UAAW,eAAjB,UACUE,EADV,IACoB,uBAAGqB,QAAS,kBAAMZ,EAAc,QAAhC,SAElB,KACJ,OACE,yBAAKX,UAAW,iDACd,kBAAC,IAAD,CAASwB,GAAI,IAAKxB,UAAW,eAAgByB,gBAAiB,UAA9D,yBAGA,yBAAKzB,UAAW,oCACd,yBAAKA,UAAWiB,EAAYS,KAAK,MAC/B,0BACE1B,UAAW,cACX2B,OAAQ,KACRC,SAAU,SAACC,GAAD,OAAOlB,EAAcJ,EAASsB,KAExC,2BACEC,MAAOvB,EACPP,UAAW,oBACX+B,YAAa,sBACbC,SAAU,SAACnB,GAAD,OAAWL,EAAWK,EAAMoB,OAAOH,UAE/C,4BAAQf,KAAM,SAAUf,UAAW,2BAAnC,iBAKHsB,KG5CHjB,EAAQ6B,aJHC,WAAqD,IAAhCC,EAA+B,uDAAvBlC,EAAe0B,EAAQ,uCACjE,OAAQA,EAAOZ,MACb,IGRyB,gBHSvB,OAAO,2BACFoB,GADL,IAEEjC,SAAUyB,EAAOzB,WAErB,QACE,OAAOiC,MISEC,MAbf,WACE,OACE,kBAAC,IAAD,CAAU/B,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOgC,UAAWtC,EAAMuC,KAAM,UCJpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ed282166.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"hide\":\"TopNavbar_hide__1RKru\",\"show\":\"TopNavbar_show__vk9jI\"};","import React from \"react\";\n\nconst Main = () => {\n  return <div className={\"container-fluid\"}></div>;\n};\nexport default Main;\n","import * as actions from \"./actions\";\n\nconst INITIAL_STATE = {\n  userName: \"\",\n};\n\nexport default function mainReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case actions.SET_USER_NAME:\n      return {\n        ...state,\n        userName: action.userName,\n      };\n    default:\n      return state;\n  }\n}\n","import React, { useCallback, useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setUserName } from \"../../store/actionCreators\";\nimport styles from \"./TopNavbar.module.css\";\n\nconst TopNavbar = () => {\n  const userName = useSelector((store) => store.userName);\n  const [unModel, setUNModel] = useState(userName);\n  const dipatch = useDispatch();\n  const onSetUserName = useCallback(\n    (userName, event) => {\n      if (event) {\n        event.preventDefault();\n      }\n      dipatch(setUserName(userName));\n    },\n    [dipatch]\n  );\n  const formClasses = [];\n  if (userName) {\n    formClasses.push(styles.hide);\n  } else {\n    formClasses.push(styles.show);\n  }\n  const userDiv = userName ? (\n    <span className={\"navbar-text\"}>\n      Witaj, {userName} <i onClick={() => onSetUserName(null)}>&times;</i>\n    </span>\n  ) : null;\n  return (\n    <nav className={\"navbar navbar-expand-sm navbar-light bg light\"}>\n      <NavLink to={\"/\"} className={\"navbar-brand\"} activeClassName={\"active\"}>\n        Strona główna\n      </NavLink>\n      <div className={\"d-flex justify-content-end w-100\"}>\n        <div className={formClasses.join(\" \")}>\n          <form\n            className={\"form-inline\"}\n            action={null}\n            onSubmit={(e) => onSetUserName(unModel, e)}\n          >\n            <input\n              value={unModel}\n              className={\"form-control mr-2\"}\n              placeholder={\"Wpisz identyfikator\"}\n              onChange={(event) => setUNModel(event.target.value)}\n            />\n            <button type={\"submit\"} className={\"btn btn-outline-default\"}>\n              Ustaw usera\n            </button>\n          </form>\n        </div>\n        {userDiv}\n      </div>\n    </nav>\n  );\n};\n\nexport default TopNavbar;\n","import * as actions from \"./actions\";\n\nexport function setUserName(userName) {\n  return {\n    type: actions.SET_USER_NAME,\n    userName,\n  };\n}\n","export const SET_USER_NAME = \"SET_USER_NAME\";\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Main from \"./containers/Main\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport MainReducer from \"./store/MainReducer\";\nimport TopNavbar from \"./components/top-navbar/TopNavbar\";\n\nconst store = createStore(MainReducer);\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <TopNavbar></TopNavbar>\n        <Switch>\n          <Route component={Main} path={\"/\"} />\n        </Switch>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}